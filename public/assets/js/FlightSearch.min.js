jQuery(document).ready(function($){
function moveProgressBar(n, t) {
	$(".dot_spinner").css("display", "inline-block");
	$(".progress-wrap").fadeIn();
	var r = n / t,
		u = t,
		i = r * $(".progress-wrap").width();
	i = window.isRTLbool == !1 ? i : -i;
	$(".progress-bar").stop().animate({
		left: i
	}, 1200, function() {
		n == t && ($(".progress-wrap").fadeOut(), $(".dot_spinner").css("display", "none"), $("#btnSearch").removeClass("disabled"))
	})
}
var Flight = Flight || {},
	NoMoreData, initialValue, sliderTooltip;
Flight.API = {
	FirstLoad: !0,
	SearchHistoryCookie: "savesearchcookie",
	FlightObj: null,
	PagingObj: null,
	FilterContainerId: "FilterContainer",
	FilterTemplateId: "Filters",
	FlightDetailContainer: "flightDetailContainer",
	FlightTemplateId: "flightDetails",
	FlightSearchHistoryTemplateId: "FiltersSearchHistory",
	FlightSearchHistoryContainer: "SearchHistoryContainer",
	PagingContainer: "PagingBottomContainer",
	PagingMarkUp: "PagingMarkUp",
	errorClass: "errorClass",
	SearchCriteria: [],
	histories: [],
	SearchResultPagingCount: 0,
	HasQueryString: !1,
	defaultSortOrder: "",
	defaultSortType: "",
	retryCount: 0,
	firstDataLoaded: !1,
	resetReturnDate: "",
	agentsLoaded: 0,
	AutoSuggestURL: Flight_API_AutoSuggestURL,
	FlightCurrency: $("#Flight-API-FlightCurrency").val() === undefined ? "AED" : $("#Flight-API-FlightCurrency").val(),
	FlightSettings: $("#Flight-API-FlightSettings").val(),
	FilterResultFound: $("#Flight-API-FilterResultFound").val(),
	HoursLabel: $("#Flight-API-HoursLabel").val(),
	CurrencyID: $("#Flight-API-CurrencyID").val(),
	CurrencySymbol: $("#Flight-API-CurrencySymbol").val(),
	SearchFlightsUrl: $("#Flight-API-SearchFlights").val(),
	SearchPlacesUrl: $("#Flight-API-SearchPlaces").val(),
	InitializeOnLoad: function() {
		Flight.API.CheckSearchHistory();
		window.location.search != "" ? this.SetandValidateQueryString() : ($("#" + Flight.API.FilterContainerId).empty(), $("#" + Flight.API.FlightDetailContainer).empty(), this.SearchDefaultQuery())
	},
	UpdateSortingDropdown: function(n) {
		n == "RT" ? ($("#ddlsorting option[value='return']").css("display", "block"), $("#sortingDropdownContainer .dd-option-value").each(function() {
			this.value == "return" && $(this).parents("li").css("display", "block")
		})) : ($("#ddlsorting option[value='return']").css("display", "none"), $("#sortingDropdownContainer .dd-option-value").each(function() {
			this.value == "return" && $(this).parents("li").css("display", "none")
		}))
	},
	FlightBooking: function() {
		$("#btnSearch").addClass("disabled");
		this.HasQueryString && ($(".spinner").addClass("on"), this.HasQueryString = !1);
		var n = Flight.TravelAndCabin.GetCabinFieldValue(),
			r = $("#tbFrom").val(),
			u = $("#tbTo").val(),
			f = $("#tbDepartDate").val(),
			e = $("#tbReturnDate").val(),
			o = n.Adults,
			s = n.Children,
			h = n.Infants,
			c = n.Class,
			l = $("#flightType").val(),
			a = $("#PageId").val(),
			v = $("#hdnSourceAirport").val(),
			y = $("#hdnDestinationAirport").val(),
			i = 0,
			t = 0;
		Flight.API.CurrencyID || (Flight.API.CurrencyID = $("#currencySelect").val());
		$(".flight-currency").css("cursor", "not-allowed");
		$(".flight-currency").css("pointer-events", "none");
		$.ajax({
			url: Flight.API.SearchFlightsUrl,
			contentType: "application/json; charset=utf-8",
			method: "GET",
			data: JSON.stringify({
				OriginPlace: r,
				DestinationPlace: u,
				Adults: o,
				Children: s,
				Infants: h,
				InboundDate: e,
				OutboundDate: f,
				FlightType: l,
				CabinClass: c,
				PageId: a,
				Culture: $("#" + culture).attr("data-current-ui-culture"),
				Currency: Flight.API.CurrencyID,
				sourceId: v,
				destinationId: y
			}),
			dataType: "json",
			success: function(n) {
				console.log(n);
				var r, u, f, c, l, e, o, a, s;
				if (Flight.API.PagingObj = null, Flight.API.firstDataLoaded ? $("#errorMessage").hide() : ($("#" + Flight.API.FilterContainerId).empty(), $("#" + Flight.API.FlightDetailContainer).empty()), n != "false")
					if ($("#" + Flight.API.FilterContainerId).empty(), $("#" + Flight.API.FlightDetailContainer).empty(), r = n, r.RootObject != null && r.SearchResult.length > 0) {
						$("#flightHeader").show();
						r.RootObject.Agents && (i = r.RootObject.Agents.length, $.each(r.RootObject.Agents, function(n, i) {
							i.Status == "UpdatesComplete" && (t = t + 1, Flight.API.agentsLoaded = t)
						}));
						Flight.API.FlightObj = $.extend(!0, {}, r);
						$("#flightHeaderDescription").text(FlightSearchHeaderDescription);
						Flight.API.RenderMarkUp(Flight.API.FilterTemplateId, Flight.API.FilterContainerId, r.RootObject);
						u = 0;
						f = $("#loadMoreInfo").attr("data-pagesize");
						$("#loadMoreInfo").attr("data-pageno", "0");
						r.SearchResult = Flight.API.SortByPrice(r.SearchResult, "asc");
						c = Flight.API.GetPagingRecord(u, f, r);
						l = Math.ceil(r.SearchResult.length / f);
						Flight.API.PagingObj = r;
						Flight.API.RenderMarkUp(Flight.API.FlightTemplateId, Flight.API.FlightDetailContainer, c);
						u < l - 1 ? ($("#loadMoreInfo").attr("data-pageno", parseInt(u) + 1), $("#loadMoreInfo").show(), NoMoreData = !1) : ($("#loadMoreInfo").hide(), NoMoreData = !0);
						$("#flightSortingContainer").show();
						$("#sortingDropdownContainer").show();
						e = r.Filters.OutBoundMinDuration + 31;
						o = r.Filters.OutBoundMaxDuration + 60;
						minhour = Math.floor(e / 60);
						minMinute = e - minhour * 60;
						a = Flight.API.GetProperTime(minhour, minMinute);
						maxhour = Math.floor(o / 60);
						maxMinute = o - maxhour * 60;
						s = Flight.API.GetProperTime(maxhour, maxMinute);
						minhour == 0 && (minhour = "00");
						minhour > 0 && minhour < 10 && (minhour = "0" + minhour);
						maxhour == 0 && (maxhour = "00");
						maxhour > 0 && maxhour < 10 && (maxhour = "0" + maxhour);
						minMinute == "30" && maxMinute == "30" ? $("#timestring").text(minhour + ".5 " + Flight.API.HoursLabel + " - " + maxhour + ".5 " + Flight.API.HoursLabel) : minMinute == "30" ? $("#timestring").text(minhour + ".5 " + Flight.API.HoursLabel + " - " + maxhour + " " + Flight.API.HoursLabel) : maxMinute == "30" ? $("#timestring").text(minhour + " " + Flight.API.HoursLabel + " - " + maxhour + ".5 " + Flight.API.HoursLabel) : $("#timestring").text(minhour + " " + Flight.API.HoursLabel + " - " + maxhour + " " + Flight.API.HoursLabel);
						$("#tbDurationFrom").val(s);
						Flight.API.TwentyFourHourTimeSlider($(".Outbound"), $("#tbDepLandingFrom"), $("#tbDepLandingTo"), $("#deplandfrom"), $("#deplandto"), outboundMin, outboundMax, 15);
						$("#tbReturnFrom").val() && Flight.API.TwentyFourHourTimeSlider($(".Return"), $("#tbReturnFrom"), $("#tbReturnTo"), $("#retlandfrom"), $("#retlandto"), returnBoundMin, returnBoundMax, 15);
						Flight.API.SliderDuration($(".journey"), $("#tbDurationFrom"), a, s, 15);
						$("#filterDuration").show();
						$("#flightHeaderCount").html(r.SearchResult.length + " ");
						$(".spinner").removeClass("on");
						moveProgressBar(t, i);
						var h = parseInt($(".generic-widget-inside-results").attr("data-sequenceCount")) - 1,
							v = $(".generic-widget-inside-results").html(),
							y = $("#" + Flight.API.FlightDetailContainer + "> li").length;
						h <= y ? $("#flightDetailContainer > li").eq(h).after("<li>" + v + "<\/li>") : h >= r.SearchResult.length && y == r.SearchResult.length && $("#flightDetailContainer > li").last().after("<li>" + v + "<\/li>");
						Flight.API.firstDataLoaded = !0;
						r.RootObject.Status == "UpdatesComplete" ? (Flight.API.UpdateSortingDropdown(r.FlightType), Flight.API.firstDataLoaded = !1, Flight.API.retryCount = 0, $(".flight-currency").removeAttr("style")) : setTimeout(function() {
							Flight.API.FlightBooking()
						}, 2e3)
					} else Flight.API.retryCount == 20 ? (Flight.API.retryCount = 0, Flight.API.NoResultFound(), $(".flight-currency").removeAttr("style")) : (Flight.API.retryCount = Flight.API.retryCount + 1, setTimeout(function() {
						Flight.API.FlightBooking()
					}, 2e3));
				else Flight.API.retryCount == 20 ? (Flight.API.retryCount = 0, Flight.API.firstDataLoaded ? moveProgressBar(Flight.API.agentsLoaded, Flight.API.agentsLoaded) : Flight.API.NoResultFound(), $(".flight-currency").removeAttr("style")) : (Flight.API.retryCount = Flight.API.retryCount + 1, setTimeout(function() {
					Flight.API.FlightBooking()
				}, 2e3))
			},
			error: function() {
				Flight.API.retryCount == 20 ? (Flight.API.retryCount = 0, Flight.API.firstDataLoaded ? moveProgressBar(Flight.API.agentsLoaded, Flight.API.agentsLoaded) : Flight.API.NoResultFound(), $(".flight-currency").removeAttr("style")) : (Flight.API.retryCount = Flight.API.retryCount + 1, setTimeout(function() {
					Flight.API.FlightBooking()
				}, 2e3))
			}
		})
	},
	Validate: function() {
		var n = !0,
			o = $("#tbFrom"),
			t = $("#tbDepartDate"),
			i = $("#tbReturnDate"),
			r = "",
			u, f, e, s;
		return i.val() == "" ? ($("#flightType").val("ONE"), r = "ONE") : ($("#flightType").val("RT"), r = "RT"), u = "", f = "", t && t.val() && (e = t.val().split("/"), u = new Date(Number(e[1]) + "-" + Number(e[0]) + "-" + Number(e[2])), Date.parse((new Date).toDateString()) > Date.parse(u) && ($("#tbDepartDate").val(""), n = !1)), i && i.val() ? (s = i.val().split("/"), f = new Date(Number(s[1]) + "-" + Number(s[0]) + "-" + Number(e[2])), Date.parse((new Date).toDateString()) >= Date.parse(f) ? (n = !1, $("#tbReturnDate").val("")) : u && f && Date.parse(u) > Date.parse(f) && (n = !1, $("#tbReturnDate").val(""), $("#tbDepartDate").val(""))) : r = "ONE", r === "RT" ? (n = this.ValidateString(o) && n, n = this.ValidateString(t) && n, n = this.ValidateString(i) && n, Flight.TravelAndCabin.IsValidCabinField() && n) : r === "ONE" ? (n = this.ValidateString(o) && n, n = this.ValidateString(t) && n, Flight.TravelAndCabin.IsValidCabinField() && n) : (n = this.ValidateString(o) && n, n = this.ValidateString(t) && n, this.ValidateString(i) && n)
	},
	ValidateString: function(n) {
		var t = !0;
		return n.val() != undefined && n.val() != "" && n.val().length > 0 ? (t = !0, n.removeClass(this.errorClass)) : (t = !1, n.addClass(this.errorClass)), t
	},
	RenderMarkUp: function(n, t, i) {
		var r = $("#" + n).html(),
			u = Mustache.to_html(r, i);
		$("#" + t).append(u);
		Flight.API.SetToolTipDesign()
	},
	NoResultFound: function() {
		$("#flightHeaderCount").html("0 ");
		$("#flightSortingContainer").hide();
		$("#errorMessage").show();
		$(".spinner").removeClass("on");
		$("#loadMoreInfo").hide();
		NoMoreData = !0;
		$("#sortingDropdownContainer").hide();
		$("#btnSearch").removeClass("disabled")
	},
	ApplyFilter: function(n) {
		var r;
		$("#loadMoreInfo").attr("data-pageno", "0");
		$("#errorMessage").hide();
		$(".load_updates").addClass("on");
		var u = $("#flightDetailContainer").attr("data-sorttype"),
			f = $("#flightDetailContainer").attr("data-sortorder"),
			e = $("#tbDepLandingFrom").val() == "24:00" ? "23:59" : $("#tbDepLandingFrom").val(),
			o = $("#tbDepLandingTo").val() == "24:00" ? "23:59" : $("#tbDepLandingTo").val(),
			s = $("#tbReturnFrom").val() == "24:00" ? "23:59" : $("#tbReturnFrom").val(),
			h = $("#tbReturnTo").val() == "24:00" ? "23:59" : $("#tbReturnTo").val(),
			c = $("#tbDurationFrom").val(),
			t = "",
			i = 0;
		$(".agent-chk input[type='checkbox']").each(function() {
			$(this).is(":checked") && (t = i == 0 ? $(this).attr("data-name") : t + "," + $(this).attr("data-name"), i++)
		});
		r = {
			DepLandingFrom: e,
			DepLandingTo: o,
			ArrivalLandingFrom: s,
			ArrivalLandingTo: h,
			AgentsName: t,
			Duration: c,
			FlightList: this.FlightObj,
			SortType: u,
			SortOrder: f,
			IsSort: n
		};
		this.GetFilterFlights(r);
		$(".load_updates").removeClass("on")
	},
	GetFilterFlights: function(n) {
		var i = $.extend(!0, {}, n.FlightList),
			v, s, h, y, k, u, c, f, r, t, a, w;
		if (i = this.Sort(i, n.SortType, n.SortOrder), v = !1, n.DepLandingFrom != "" && n.DepLandingFrom != undefined && n.DepLandingTo != "" && n.DepLandingTo != undefined)
			for (t = 0; t < i.SearchResult.length; t++) i.SearchResult[t] != null && (u = i.SearchResult[t], i.SearchResult[t] = null, s = Date.parse("01/01/2016 " + u.outBoundDeparture24HoursTime) >= Date.parse("01/01/2016 " + n.DepLandingFrom), h = Date.parse("01/01/2016 " + u.outBoundDeparture24HoursTime) <= Date.parse("01/01/2016 " + n.DepLandingTo), s && h && (i.SearchResult[t] = u));
		if ($("#flightType").val() == "RT" && n.ArrivalLandingFrom != "" && n.ArrivalLandingFrom != undefined && n.ArrivalLandingTo != "" && n.ArrivalLandingTo != undefined)
			for (t = 0; t < i.SearchResult.length; t++) i.SearchResult[t] != null && (u = i.SearchResult[t], i.SearchResult[t] = null, s = Date.parse("01/01/2016 " + u.inBoundDeparture24HoursTime) >= Date.parse("01/01/2016 " + n.ArrivalLandingFrom), h = Date.parse("01/01/2016 " + u.inBoundDeparture24HoursTime) <= Date.parse("01/01/2016 " + n.ArrivalLandingTo), s && h && (i.SearchResult[t] = u));
		if (n.Duration != "" && n.Duration != undefined)
			for (y = n.Duration.split(":"), k = y[0] * 60 + parseInt(y[1]), t = 0; t < i.SearchResult.length; t++) i.SearchResult[t] != null && (u = i.SearchResult[t], i.SearchResult[t] = null, k >= u.outBoundDuration && (i.SearchResult[t] = u));
		if (n.AgentsName != "") {
			for (t = 0; t < i.SearchResult.length; t++)
				if (i.SearchResult[t] != null) {
					var u = i.SearchResult[t],
						e = i.SearchResult[t].InBoundCarriers,
						o = i.SearchResult[t].OutBoundCarriers;
					if (i.SearchResult[t] = null, e != null && o != null) {
						for (f = !1, r = 0; r < o.length; r++)
							if (n.AgentsName.split(",").indexOf(o[r].Name) > -1) f = !0;
							else {
								f = !1;
								break
							} for (c = !1, r = 0; r < e.length; r++)
							if (n.AgentsName.split(",").indexOf(e[r].Name) > -1) c = !0;
							else {
								c = !1;
								break
							} f && c && (i.SearchResult[t] = u)
					} else if (e != null) {
						for (f = !1, r = 0; r < e.length; r++) n.AgentsName.split(",").indexOf(e[r].Name) > -1 && (f = !0);
						f && (i.SearchResult[t] = u)
					} else if (o != null) {
						for (f = !1, r = 0; r < o.length; r++) n.AgentsName.split(",").indexOf(o[r].Name) > -1 && (f = !0);
						f && (i.SearchResult[t] = u)
					}
				}
		} else i = null;
		if ($("#" + Flight.API.FlightDetailContainer).empty(), i != null) {
			if (i.SearchResult != null)
				for (t = 0; t < i.SearchResult.length; t++) i.SearchResult[t] != null && (v = !0);
			if (v) {
				i.SearchResult = this.CleanNullObject(i.SearchResult);
				this.PagingObj = $.extend(!0, {}, i);
				$("#" + this.FlightDetailContainer).empty();
				var l = $("#loadMoreInfo").attr("data-pageno"),
					p = $("#loadMoreInfo").attr("data-pagesize"),
					d = Math.ceil(this.PagingObj.SearchResult.length / p);
				if (l < d - 1 ? ($("#loadMoreInfo").attr("data-pageno", parseInt(l) + 1), $("#loadMoreInfo").show(), NoMoreData = !1) : ($("#loadMoreInfo").attr("data-pageno", d), $("#loadMoreInfo").hide(), NoMoreData = !0), n.IsSort)
					for (t = 0; t <= l; t++) a = this.GetPagingRecord(t, p, this.PagingObj), this.RenderMarkUp(this.FlightTemplateId, this.FlightDetailContainer, a);
				else a = this.GetPagingRecord(l, p, this.PagingObj), this.RenderMarkUp(this.FlightTemplateId, this.FlightDetailContainer, a);
				$("#flightSortingContainer").show();
				$("#sortingDropdownContainer").show();
				w = FlightSearchHeaderDescription.replace(/{fromplace}/g, $("#tbFrom").val()).replace(/{toplace}/g, $("#tbTo").val());
				n.FlightList.RootObject && n.FlightList.RootObject.Itineraries && Flight.API.FilterResultFound && n.FlightList.RootObject.Itineraries.length != this.PagingObj.SearchResult.length && (w = Flight.API.FilterResultFound.replace("{$}", n.FlightList.RootObject.Itineraries.length));
				$("#flightHeaderDescription").text(w);
				$("#flightHeaderCount").html(this.PagingObj.SearchResult.length + " ");
				var b = parseInt($(".generic-widget-inside-results").attr("data-sequenceCount")) - 1,
					g = $(".generic-widget-inside-results").html(),
					nt = $("#" + Flight.API.FlightDetailContainer + "> li").length;
				b <= nt ? $("#flightDetailContainer > li").eq(b).after("<li>" + g + "<\/li>") : b >= i.SearchResult.length && nt == i.SearchResult.length && $("#flightDetailContainer > li").last().after("<li>" + g + "<\/li>")
			} else this.NoResultFound()
		} else this.NoResultFound()
	},
	GetUrlParameter: function(n) {
		n = n.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
		var i = new RegExp("[\\?&]" + n + "=([^&#]*)"),
			t = i.exec(location.search);
		return t === null ? "" : decodeURIComponent(t[1].replace(/\+/g, " "))
	},
	SearchDefaultQuery: function() {
		var t;
		try {
			var s = $("#PageId").val(),
				r = $("#tbFrom").val(),
				u = $("#tbTo").val(),
				f = $("#tbReturnDate").val(),
				e = $("#tbDepartDate").val(),
				o = $("#hdnDestinationAirport").val(),
				i = Flight.TravelAndCabin.GetAdultTraveller(),
				n = Flight.TravelAndCabin.GetInfantTraveller();
			i && n && n > 0 && n > i ? (t = $("#hdnExtraInfantsErrorMessage").val(), t ? alert(t) : alert("Only 1 Child (0-2) per adult is allowed")) : r && o && u && f && e ? Flight.API.Validate() && ($("#errorMessage").hide(), $("#loadMoreInfo").hide(), NoMoreData = !0, $("#sortingDropdownContainer").hide(), $(".spinner").addClass("on"), $("#" + Flight.API.FilterContainerId).empty(), $("#" + Flight.API.FlightDetailContainer).empty(), $("#flightHeader").hide(), $("#errorMessage").hide(), $(".progress-bar").css("left", 0), Flight.API.firstDataLoaded = !1, Flight.API.FlightBooking()) : $("#errorMessage").show()
		} catch (h) {}
	},
	SetandValidateQueryString: function() {
		var n = !0,
			h = this.GetUrlParameter("currency"),
			i, g, f, e, o, s, b;
		(h == undefined || h == "") && (window.location.href = this.updateQueryStringParameter(window.location.href, "currency", $("#hdfCurrency").val()));
		var c = this.GetUrlParameter("departure"),
			k = this.GetUrlParameter("destination"),
			tt = this.GetUrlParameter("destinationId"),
			nt = this.GetUrlParameter("sourceId");
		$("#hdnSourceAirport").val(nt);
		var l = this.GetUrlParameter("passengers"),
			y = this.GetUrlParameter("children"),
			u = this.GetUrlParameter("infants"),
			r = this.GetUrlParameter("returnDate"),
			t = this.GetUrlParameter("departureDate"),
			a = this.GetUrlParameter("trip"),
			p = this.GetUrlParameter("cabin"),
			it = $("#PageId").val();
		$.ajax({
			url: Flight.API.SearchPlacesUrl,
			data: {
				searchQuery: request.term,
				Currency: Flight.API.FlightCurrency,
				settingsID: Flight.API.FlightSettings
			},
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			async: !1,
			success: function(n) {
				var data = JSON.parse(n.data);

				var t = !1;
				n && data.Places != undefined && data.Places.forEach(function(n) {
					n.CityId == request.term && (c = n.PlaceName + ", " + n.CountryName + " (" + n.PlaceId.replace("-sky", "") + ")", t = !0)
				});
				n && data.Places[0] != undefined && !t && (c = data.Places[0].PlaceName + ", " + data.Places[0].CountryName + " (" + data.Places[0].PlaceId.replace("-sky", "") + ")")
			}
		});
		var w = t.split("-"),
			d = new Date(Number(w[0]), Number(w[1]) - 1, Number(w[2])),
			v = undefined;
		this.CheckValidateEmptyString(r) ? (i = r.split("-"), r = Flight.API.FormatDate(new Date(Number(i[0]), Number(i[1]) - 1, Number(i[2]))), v = new Date(Number(i[0]), Number(i[1]) - 1, Number(i[2]))) : $("#tbReturnDate").val("");
		this.CheckValidateEmptyString(t) && (i = t.split("-"), t = Flight.API.FormatDate(new Date(Number(i[0]), Number(i[1]) - 1, Number(i[2]))));
		t && Date.parse((new Date).toDateString()) > Date.parse(d) && (n = !1, t = "");
		r && v && r != undefined ? Date.parse((new Date).toDateString()) > Date.parse(v) ? (n = !1, r = "") : Date.parse(d) > Date.parse(v) && (n = !1, r = "", t = "") : a = 1;
		g = this.GetUrlParameter("childAges");
		a != "" ? a == 1 ? (n = this.ValidateEmptyString(c, $("#tbFrom")) && n, n = this.ValidateEmptyString(k, $("#tbTo")) && n, n = this.ValidateDate(t, $("#tbDepartDate")) && n, t && (Flight.API.resetReturnDate = t), f = this.ValidateAdult(l, $("#travellersCabinField")), n = f && n, e = this.ValidateChildren(y, $("#travellersCabinField")), n = e && n, o = this.ValidateInfant(u, $("#travellersCabinField")), n = o && n, s = this.ValidateCabinClass(p, $("#travellersCabinField")), n = s && n, e && o && s && f ? $("#travellersCabinField").removeClass(this.errorClass) : $("#travellersCabinField").addClass(this.errorClass)) : (n = this.ValidateEmptyString(c, $("#tbFrom")) && n, n = this.ValidateEmptyString(k, $("#tbTo")) && n, n = this.ValidateDate(r, $("#tbReturnDate")) && n, n = this.ValidateDate(t, $("#tbDepartDate")) && n, f = this.ValidateAdult(l, $("#travellersCabinField")), n = f && n, e = this.ValidateChildren(y, $("#travellersCabinField")), n = e && n, o = this.ValidateInfant(u, $("#travellersCabinField")), n = o && n, s = this.ValidateCabinClass(p, $("#travellersCabinField")), n = s && n, e && o && s && f ? $("#travellersCabinField").removeClass(this.errorClass) : $("#travellersCabinField").addClass(this.errorClass)) : n = !1;
		a == 1 ? ($("#hlOneWay").click(), $("#flightType").val("ONE")) : ($("#flightType").val("RT"), $("#tbReturnDate").val(r));
		$("#tbFrom").val(c);
		$("#tbDepartDate").val(t);
		this.CheckValidateEmptyString(h) && (this.SetSlickDropdownValue(h, "#currencySelect"), Flight.API.CurrencyID = h);
		Flight.TravelAndCabin.SetFieldValue(l, y, u, this.GetCabinClass(p), g);
		
		// Flight.API.FlightBooking();
		n ? (this.HasQueryString = !0, $("#flightHeader").hide(), $("#errorMessage").hide(), $(".progress-bar").css("left", 0), Flight.API.firstDataLoaded = !1, l && u && u > 0 && u > l ? (b = $("#hdnExtraInfantsErrorMessage").val(), b ? alert(b) : alert("Only 1 Child (0-2) per adult is allowed"), this.NoResultFound()) : Flight.API.FlightBooking()) : this.NoResultFound()
	},
	ValidateAdult: function(n, t) {
		var i = this.ValidateEmptyString(n, t);
		return i ? parseInt(n) >= Flight.TravelAndCabin.MinimumAdultPassenger && parseInt(n) <= Flight.TravelAndCabin.MaximumAdultPassenger ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1) : (t.addClass(this.errorClass), !1)
	},
	ValidateChildren: function(n, t) {
		var i = this.ValidateEmptyString(n, t);
		return i ? parseInt(n) >= Flight.TravelAndCabin.MinimumChildrenPassenger && parseInt(n) <= Flight.TravelAndCabin.MaximumChildrenPassenger ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1) : (t.addClass(this.errorClass), !1)
	},
	ValidateInfant: function(n, t) {
		var i = this.ValidateEmptyString(n, t);
		return i ? parseInt(n) >= Flight.TravelAndCabin.MinimumChildrenPassenger && parseInt(n) <= Flight.TravelAndCabin.MaximumChildrenPassenger ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1) : (t.addClass(this.errorClass), !1)
	},
	ValidateEmptyString: function(n, t) {
		var i = typeof n == "number";
		return i ? n != null && n != undefined ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1) : n != null && n != "" && n != undefined ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1)
	},
	CheckValidateEmptyString: function(n) {
		return n != null && n != "" && n.length > 0 ? !0 : !1
	},
	ValidateDate: function(n, t) {
		var u = this.ValidateEmptyString(n, t),
			r = "Invalid Date";
		if (u) {
			if (new Date(n) == r) {
				var i = this.ChunkString(n.replace(/[/]/g, ""), 2),
					f = i[1] + "/" + i[0] + "/" + i[2] + i[3],
					e = new Date(f).format("dd/MM/yyyy");
				return e != r ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1)
			}
			return t.removeClass(this.errorClass), !0
		}
		return t.addClass(this.errorClass), !1
	},
	ValidateFlightType: function(n) {
		return n == 1 || n == 2 ? !0 : !1
	},
	ValidateCabinClass: function(n, t) {
		var i = this.ValidateEmptyString(n, t);
		return i ? n.toLowerCase() == "e" || n.toLowerCase() == "x" || n.toLowerCase() == "b" || n.toLowerCase() == "f" ? (t.removeClass(this.errorClass), !0) : (t.addClass(this.errorClass), !1) : (t.addClass(this.errorClass), !1)
	},
	FormatDate: function(n) {
		var r = n.getFullYear(),
			i = (1 + n.getMonth()).toString(),
			t;
		return i = i.length > 1 ? i : "0" + i, t = n.getDate().toString(), t = t.length > 1 ? t : "0" + t, t + "/" + i + "/" + r
	},
	SaveSearchHistoryPopUp: function() {
		var n = null,
			t = $("#txtSearchName").val(),
			i;
		t && ($.cookie(this.SearchHistoryCookie) && $.cookie(this.SearchHistoryCookie) != "[]" && (i = JSON.parse($.cookie(this.SearchHistoryCookie)), i.length > 0 && (this.histories = i)), this.ValidateExistingUser(t) ? (n = this.GetValidFlightInputs(), n != null && this.SetSearchHistory(t, n, this.histories)) : (n = this.GetValidFlightInputs(), n != null && this.CreateSearchHistory(t, n, this.histories)))
	},
	ValidateExistingUser: function(n) {
		var r = !1,
			t, i;
		if ($.cookie(this.SearchHistoryCookie) && (t = JSON.parse($.cookie(this.SearchHistoryCookie)), t.length > 0))
			for (i = 0; i < t.length; i++)
				if (t[i].HistoryName.toLowerCase() == n.toLowerCase()) {
					r = !0;
					break
				} return r
	},
	SkyFormatDate: function(n) {
		var r = n.getFullYear(),
			i = (1 + n.getMonth()).toString(),
			t;
		return i = i.length > 1 ? i : "0" + i, t = n.getDate().toString(), t = t.length > 1 ? t : "0" + t, r + "-" + i + "-" + t
	},
	GetValidFlightInputs: function() {
		var f = null,
			r, u, e, o;
		if (this.Validate()) {
			var n = Flight.TravelAndCabin.GetCabinFieldValue(),
				s = $("#tbFrom").val(),
				h = $("#tbTo").val(),
				t = $("#tbDepartDate").val(),
				i = $("#tbReturnDate").val(),
				c = n.Adults,
				l = n.Children,
				a = n.Infants,
				v = n.Class,
				y = $("#flightType").val(),
				p = $("#PageId").val();
			t && (r = t.split("/"), t = this.SkyFormatDate(new Date(r[2], r[1] - 1, r[0])));
			i && (u = i.split("/"), i = this.SkyFormatDate(new Date(u[2], u[1] - 1, u[0])));
			e = $("#hdnSourceAirport").val();
			o = $("#hdnDestinationAirport").val();
			f = {
				OriginPlace: s,
				DestinationPlace: h,
				Adults: c,
				Children: l,
				Infants: a,
				InboundDate: i,
				OutboundDate: t,
				FlightType: y,
				CabinClass: v,
				PageId: p,
				Currency: Flight.API.CurrencyID,
				sourceId: e,
				destinationId: o,
				Child1: $("#childDiv-0 .childAge").val(),
				Child2: $("#childDiv-1 .childAge").val(),
				Child3: $("#childDiv-2 .childAge").val(),
				Child4: $("#childDiv-3 .childAge").val(),
				Child5: $("#childDiv-4 .childAge").val(),
				Child6: $("#childDiv-5 .childAge").val(),
				Child7: $("#childDiv-6 .childAge").val(),
				Child8: $("#childDiv-7 .childAge").val()
			}
		}
		return f
	},
	CreateSearchHistory: function(n, t, i) {
		var u = {
				Id: this.GenerateGUID(),
				HistoryName: n,
				SearchCriteria: t
			},
			r;
		i.push(u);
		r = JSON.stringify(i);
		$.cookie(this.SearchHistoryCookie, r, {
			expires: 365,
			path: "/",
			domain: ""
		});
		$("#txtSearchName").val("");
		this.CheckSearchHistory()
	},
	RemoveEntryFromCookie: function(n) {
		var t, i, r;
		$.cookie(this.SearchHistoryCookie) && $.cookie(this.SearchHistoryCookie) != "[]" && (t = JSON.parse($.cookie(this.SearchHistoryCookie)), i = $.grep(t, function(t) {
			return t.Id === n
		}, !0), this.histories = i, r = JSON.stringify(this.histories), $.cookie(this.SearchHistoryCookie, r, {
			expires: 365,
			path: "/",
			domain: ""
		}), this.CheckSearchHistory())
	},
	SetSearchHistory: function(n, t, i) {
		var f = !1,
			u = JSON.parse($.cookie(this.SearchHistoryCookie)),
			r;
		if (u.length > 0)
			for (r = 0; r < u.length; r++)
				if (u[r].HistoryName.toLowerCase() == n.toLowerCase() && u[r].SearchCriteria.OriginPlace == t.OriginPlace && u[r].SearchCriteria.DestinationPlace == t.DestinationPlace && u[r].SearchCriteria.Adults == t.Adults && u[r].SearchCriteria.Children == t.Children && u[r].SearchCriteria.Infants == t.Infants && u[r].SearchCriteria.InboundDate == t.InboundDate && u[r].SearchCriteria.OutboundDate == t.OutboundDate && u[r].SearchCriteria.FlightType == t.FlightType && u[r].SearchCriteria.CabinClass == t.CabinClass && u[r].SearchCriteria.PageId == t.PageId && u[r].SearchCriteria.Currency == t.Currency && u[r].SearchCriteria.CurrencySymbol == t.CurrencySymbol) {
					f = !0;
					break
				} f || this.CreateSearchHistory(n, t, i)
	},
	CheckSearchHistory: function() {
		if ($.cookie(this.SearchHistoryCookie) && $.cookie(this.SearchHistoryCookie) != "[]") {
			var n = JSON.parse($.cookie(this.SearchHistoryCookie));
			n.length > 0 ? ($("#" + this.FlightSearchHistoryContainer).empty(), this.RenderMarkUp(this.FlightSearchHistoryTemplateId, this.FlightSearchHistoryContainer, n), $("#historyCount").html("(" + n.length + ")")) : $("#historyCount").html("(" + n.length + ")")
		} else $("#" + this.FlightSearchHistoryContainer).empty(), $("#historyCount").html("(0)")
	},
	GenerateGUID: function() {
		var n = (new Date).getTime();
		return window.performance && typeof window.performance.now == "function" && (n += performance.now()), "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(t) {
			var i = (n + Math.random() * 16) % 16 | 0;
			return n = Math.floor(n / 16), (t == "x" ? i : i & 3 | 8).toString(16)
		})
	},
	ChunkString: function(n, t) {
		return n.match(new RegExp(".{1," + t + "}", "g"))
	},
	GetFlightDate: function(n) {
		var i = "",
			t, r;
		return n != null && n != "" && (t = this.ChunkString(n, 2), r = t[1] + "/" + t[0] + "/" + t[2] + t[3], i = new Date(r).format("dd/MM/yyyy")), i
	},
	GetCabinClass: function(n) {
		return n == "x" ? "PremiumEconomy" : n == "b" ? "Business" : n == "f" ? "First" : "Economy"
	},
	GetPagingRecord: function(n, t, i) {
		var u = $.extend(!0, {}, this.PagingObj != null ? this.PagingObj : i),
			e = Math.ceil(u.SearchResult.length / t),
			r = 0,
			o, s, h, f, c;
		r = n < 0 ? 0 : n > e ? 0 : n;
		var l = !1,
			a = !1,
			v = 0,
			y = 0;
		for (r > 0 && (l = !0, v = parseInt(r) - 1), r < e - 1 && (a = !0, y = parseInt(r) + 1), o = u.SearchResult, u.SearchResult = null, s = this.PagingIterator(o, parseInt(r), t), u.SearchResult = s(), h = [], f = 0; f <= e; f++) c = {
			IsCurrentPage: f == r,
			PageNumber: f
		}, h.push(c);
		return this.SearchResultPagingCount = u.SearchResult.length, u
	},
	PagingIterator: function(n, t, i) {
		var r = 1;
		return r = t == 0 ? 0 : t > 0 ? t * parseInt(i) : t, l = n.length,
			function() {
				end = parseInt(r) + parseInt(i);
				var t = n.slice(r, end);
				return r = end < l ? end : 0, t
			}
	},
	SetToolTipDesign: function() {
		$(window).width() > 1024 && $(".tt_top").tooltipster({
			side: "top",
			trigger: Modernizr.touch ? "click" : "hover",
			maxWidth: 400,
			theme: "tooltipster-light",
			animationDuration: 50
		})
	},
	Sort: function(n, t, i) {
		return n.SearchResult = t == "duration" ? this.SortByDuration(n.SearchResult, i) : t == "airline" ? this.SortByAgent(n.SearchResult, i) : t == "departure" ? this.SortByDeparture(n.SearchResult, i) : t == "return" ? this.SortByReturn(n.SearchResult, i) : t == "stops" ? this.SortByStop(n.SearchResult, i) : this.SortByPrice(n.SearchResult, i), n
	},
	SortByDuration: function(n, t) {
		return n.sort(function(n, i) {
			var r, u;
			return t == "desc" ? (r = parseInt(n.inBoundDuration) + parseInt(n.outBoundDuration), u = parseInt(i.inBoundDuration) + parseInt(i.outBoundDuration), u - r) : (r = parseInt(n.inBoundDuration) + parseInt(n.outBoundDuration), u = parseInt(i.inBoundDuration) + parseInt(i.outBoundDuration), r - u)
		})
	},
	SortByStop: function(n, t) {
		return n.sort(function(n, i) {
			var r, u;
			return t == "desc" ? n.inBoundStopCount ? (r = parseInt(i.outBoundStopCount) + parseInt(i.inBoundStopCount), u = parseInt(n.outBoundStopCount) + parseInt(n.inBoundStopCount), r - u || parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice)) : parseInt(n.outBoundStopCount) - parseInt(i.outBoundStopCount) || parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice) : n.inBoundStopCount ? parseInt(n.outBoundStopCount) == 0 && parseInt(i.outBoundStopCount) == 0 && parseInt(n.inBoundStopCount) == 0 && parseInt(i.inBoundStopCount) == 0 ? parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice) : (r = parseInt(i.outBoundStopCount) + parseInt(i.inBoundStopCount), u = parseInt(n.outBoundStopCount) + parseInt(n.inBoundStopCount), u - r || parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice)) : parseInt(n.outBoundStopCount) == 0 && parseInt(i.outBoundStopCount) == 0 ? parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice) : parseInt(i.outBoundStopCount) - parseInt(n.outBoundStopCount) || parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice)
		})
	},
	SortByReturn: function(n, t) {
		return n.sort(function(n, i) {
			return t == "desc" ? new Date(i.inBoundDepartureTimeSort) - new Date(n.inBoundDepartureTimeSort) : new Date(n.inBoundDepartureTimeSort) - new Date(i.inBoundDepartureTimeSort)
		})
	},
	SortByDeparture: function(n, t) {
		return n.sort(function(n, i) {
			return t == "desc" ? new Date(i.outBoundDepartureTimeSort) - new Date(n.outBoundDepartureTimeSort) : new Date(n.outBoundDepartureTimeSort) - new Date(i.outBoundDepartureTimeSort)
		})
	},
	SortByPrice: function(n, t) {
		n = this.SortNestedItemsbyPrice(n, t);
		return n.sort(function(n, i) {
			return t == "desc" ? parseInt(i.AgentMaxPrice) - parseInt(n.AgentMaxPrice) : parseInt(n.AgentMinPrice) - parseInt(i.AgentMinPrice)
		})
	},
	SortNestedItemsbyPrice: function(n, t) {
		return $.each(n, function() {
			return this.agent.sort(function(n, i) {
				return t == "desc" ? parseInt(i.price) - parseInt(n.price) : parseInt(n.price) - parseInt(i.price)
			})
		})
	},
	SortByAgent: function(n, t) {
		n = this.sortNestedItemsByAgent(n, t);
		return n.sort(function(n, i) {
			return t == "desc" ? i.AgentNameDESC.toLowerCase() < n.AgentNameDESC.toLowerCase() ? -1 : i.AgentNameDESC.toLowerCase() > n.AgentNameDESC.toLowerCase() ? 1 : 0 : n.AgentNameASC.toLowerCase() < i.AgentNameASC.toLowerCase() ? -1 : n.AgentNameASC.toLowerCase() > i.AgentNameASC.toLowerCase() ? 1 : 0
		})
	},
	sortNestedItemsByAgent: function(n, t) {
		return $.each(n, function() {
			return this.agent.sort(function(n, i) {
				return t == "desc" ? i.agentName.toLowerCase() < n.agentName.toLowerCase() ? -1 : i.agentName.toLowerCase() > n.agentName.toLowerCase() ? 1 : 0 : n.agentName.toLowerCase() < i.agentName.toLowerCase() ? -1 : n.agentName.toLowerCase() > i.agentName.toLowerCase() ? 1 : 0
			})
		})
	},
	SetSlickDropdownValue: function(n, t) {
		$(t).parent().find("li").each(function() {
			var i = $(this).find(".dd-option-value").val();
			i == n && $(t).ddslick("select", {
				index: $(this).index()
			})
		})
	},
	SetDateinDatePickerWithCulture: function(n, t) {
		$(t + " .input-calendar-icon").hide();
		var e = n.split("/")[1] + "/" + n.split("/")[0] + "/" + n.split("/")[2],
			i = new Date(e),
			r = $.datepicker.regional[LanguageAndLocale].dayNames[i.getDay()],
			u = $.datepicker.regional[LanguageAndLocale].monthNames[i.getMonth()],
			f = i.getDate();
		r || (r = $.datepicker.regional.en.dayNames[i.getDay()]);
		u || (u = $.datepicker.regional.en.monthNames[i.getMonth()]);
		t == ".check-in-input" ? ($("#spanFlightCheckInDay").text(r), $("#spanFlightCheckInMonth").text(u), $("#spanFlightCheckInDate").text(f)) : ($("#spanFlightCheckOutDay").text(r), $("#spanFlightCheckOutMonth").text(u), $("#spanFlightCheckOutDate").text(f))
	},
	Slider: function(n, t) {
		var i = $("#tbRangeFrom").attr("value"),
			r = $("#tbRangeTo").attr("value"),
			f = n,
			u = t,
			e = 100 / u;
		$("#tbRangeFrom").attr("value", i);
		$("#tbRangeTo").attr("value", r);
		$(".slider-range").slider({
			range: !0,
			min: f,
			max: u,
			values: [i, r],
			isRTL: window.isRTLbool,
			slide: function(n, t) {
				$("#tbRangeFrom").attr("value", t.values[0]);
				$("#tbRangeTo").attr("value", t.values[1])
			},
			change: function() {
				Flight.API.ApplyFilter()
			}
		});
		$(".slider-range").draggable()
	},
	TwentyFourHourTimeSlider: function(n, t, i, r, u, f, e, o) {
		var a = t.val().split(":"),
			y = a[0] * 60,
			b = a[1] * 60,
			s = i.val().split(":"),
			h = s[0] * 60,
			w;
		h = h + parseInt(s[1]);
		var k = s[1] * 60,
			v = f.split(":"),
			p = v[0] * 60,
			d = v[1] * 60,
			c = e.split(":"),
			l = c[0] * 60;
		l = l + parseInt(c[1]);
		w = c[1] * 60;
		n.slider({
			range: !0,
			isRTL: window.isRTLbool,
			min: p,
			max: l,
			step: o,
			values: [y, h],
			create: sliderTooltip,
			slide: function(n, f) {
				var o = Math.floor(f.values[0] / 60),
					h = f.values[0] - o * 60,
					e, s;
				o == 0 && (o = "00");
				o > 0 && o < 10 && (o = "0" + o);
				h.length == 1 && (h = "0" + h);
				h == 0 && (h = "00");
				t.val(o + ":" + h);
				r.html(o + ":" + h + " ");
				e = Math.floor(f.values[1] / 60);
				s = f.values[1] - e * 60;
				e == 0 && (e = "00");
				e > 0 && e < 10 && (e = "0" + e);
				s.length == 1 && (s = "0" + s);
				s == 0 && (s = "00");
				u.html(" - " + e + ":" + s);
				i.val(e + ":" + s);
				$($(this).find(".ui-slider-handle")[0]).html('<div class="tip_value"><div class="tip_value_inner">' + o + ":" + h + '<\/div><div class="tip_value_arrow"><\/div><\/div>');
				$($(this).find(".ui-slider-handle")[1]).html('<div class="tip_value"><div class="tip_value_inner">' + e + ":" + s + '<\/div><div class="tip_value_arrow"><\/div><\/div>')
			},
			change: function() {
				Flight.API.ApplyFilter()
			}
		})
	},
	TwelveHourTimeSlider: function(n, t, i, r, u, f) {
		var c = t.val().split(":"),
			a = c[0] * 60,
			y = c[1] * 60,
			e = i.val().split(":"),
			o = e[0] * 60;
		o = o + parseInt(e[1]);
		var p = e[1] * 60,
			l = r.split(":"),
			v = l[0] * 60,
			w = l[1] * 60,
			s = u.split(":"),
			h = s[0] * 60,
			b = s[1] * 60;
		h = h + parseInt(s[1]);
		n.slider({
			range: !0,
			min: v,
			max: h,
			step: f,
			values: [a, o],
			create: sliderTooltip,
			slide: function(n, r) {
				var f = Math.floor(r.values[0] / 60),
					e = r.values[0] - f * 60,
					u, o;
				f == 0 && (f = "00");
				f > 0 && f < 10 && (f = "0" + f);
				e.length == 1 && (e = "0" + e);
				e == 0 && (e = "00");
				f >= 12 ? f == 12 ? (f = f, e = e + " PM") : (f = f - 12, e = e + " PM") : (f = f, e = e + " AM");
				f == 0 && (f = 12, e = e);
				t.val(f + ":" + e);
				u = Math.floor(r.values[1] / 60);
				o = r.values[1] - u * 60;
				u == 0 && (u = "00");
				u > 0 && u < 10 && (u = "0" + u);
				o.length == 1 && (o = "0" + o);
				o == 0 && (o = "00");
				u >= 12 ? u == 12 ? (u = u, o = o + " PM") : u == 24 ? (u = 11, o = "59 PM") : (u = u - 12, o = o + " PM") : (u = u, o = o + " AM");
				i.val(u + ":" + o);
				$($(this).find(".ui-slider-handle")[0]).html('<div class="tip_value"><div class="tip_value_inner">' + f + ":" + e + '<\/div><div class="tip_value_arrow"><\/div><\/div>');
				$($(this).find(".ui-slider-handle")[1]).html('<div class="tip_value"><div class="tip_value_inner">' + u + ":" + o + '<\/div><div class="tip_value_arrow"><\/div><\/div>')
			}
		})
	},
	SliderDuration: function(n, t, i, r, u) {
		var e = t.val().split(":"),
			s = e[0] * 60,
			l = e[1] * 60,
			f = i.split(":"),
			h = f[0] * 60,
			a = f[1] * 60,
			o = r.split(":"),
			c = o[0] * 60,
			v = o[1] * 60;
		n.slider({
			range: "min",
			isRTL: window.isRTLbool,
			min: h,
			max: c,
			step: u,
			value: s,
			create: sliderTooltip,
			slide: function(n, i) {
				var r = Math.floor(i.value / 60),
					e = i.value - r * 60,
					o, s, u, c, h;
				r == 0 && (r = "00");
				r > 0 && r < 10 && (r = "0" + r);
				e.length == 1 && (e = "0" + e);
				e == 0 && (e = "00");
				o = Math.floor(i.value / 60);
				s = i.value - o * 60;
				o == 0 && (o = "00");
				o > 0 && o < 10 && (o = "0" + o);
				s.length == 1 && (s = "0" + s);
				s == 0 && (s = "00");
				u = f[0];
				c = f[1];
				u == 0 && (u = "00");
				u.length == 1 && (u = "0" + u);
				t.val(r + ":" + e);
				$("#timestring").html("");
				h = "";
				e == "30" && c == "30" ? ($("#timestring").html(u + ".5 " + Flight.API.HoursLabel + " - " + r + ".5 " + Flight.API.HoursLabel), h = r + ".5 " + Flight.API.HoursLabel) : e == "30" ? ($("#timestring").html(u + " " + Flight.API.HoursLabel + " - " + r + ".5 " + Flight.API.HoursLabel), h = r + ".5 " + Flight.API.HoursLabel) : c == "30" ? ($("#timestring").html(u + ".5 " + Flight.API.HoursLabel + " - " + r + " " + Flight.API.HoursLabel), h = r + " " + Flight.API.HoursLabel) : ($("#timestring").html(u + " " + Flight.API.HoursLabel + " - " + r + " " + Flight.API.HoursLabel), h = r + " " + Flight.API.HoursLabel);
				$($(this).find(".ui-slider-handle")[0]).html('<div class="tip_value"><div class="tip_value_inner">' + h + '<\/div><div class="tip_value_arrow"><\/div><\/div>')
			},
			change: function() {
				Flight.API.ApplyFilter()
			}
		})
	},
	CleanNullObject: function(n) {
		for (var i = [], t = 0; t < n.length; t++) n[t] && i.push(n[t]);
		return i
	},
	GetProperTime: function(n, t) {
		return n == 0 && (n = "00"), n > 0 && n < 10 && (n = "0" + n), t.length == 1 && (t = "0" + t), t == 0 && (t = "00"), n + ":" + t
	},
	ResetSort: function() {
		$(".sort-filter").attr("data-sortorder", "asc");
		$("#flightDetailContainer").attr("data-sorttype", "price");
		$("#flightDetailContainer").attr("data-sortorder", "asc")
	},
	updateQueryStringParameter: function(n, t, i) {
		var r = new RegExp("([?&])" + t + "=.*?(&|$)", "i"),
			u = n.indexOf("?") !== -1 ? "&" : "?";
		return n.match(r) ? n.replace(r, "$1" + t + "=" + i + "$2") : n + u + t + "=" + i
	}
};
Flight.TravelAndCabin = {
	MinimumAdultPassenger: $("#Flight-TravelAndCabin-MinimumAdultPassenger").val() === undefined ? 1 : parseInt($("#Flight-TravelAndCabin-MinimumAdultPassenger").val()),
	MaximumAdultPassenger: $("#Flight-TravelAndCabin-MaximumAdultPassenger").val() === undefined ? 8 : parseInt($("#Flight-TravelAndCabin-MaximumAdultPassenger").val()),
	MinimumChildrenPassenger: $("#Flight-TravelAndCabin-MinimumChildrenPassenger").val() === undefined ? 0 : parseInt($("#Flight-TravelAndCabin-MinimumChildrenPassenger").val()),
	MaximumChildrenPassenger: $("#Flight-TravelAndCabin-MaximumChildrenPassenger").val() === undefined ? 8 : parseInt($("#Flight-TravelAndCabin-MaximumChildrenPassenger").val()),
	MaximumInfanAgeLimit: $("#Flight-TravelAndCabin-MaximumInfanAgeLimit").val() === undefined ? 1 : parseInt($("#Flight-TravelAndCabin-MaximumInfanAgeLimit").val()),
	MaximumChildrenAgeLimit: $("#Flight-TravelAndCabin-MaximumChildrenAgeLimit").val() === undefined ? 15 : parseInt($("#Flight-TravelAndCabin-MaximumChildrenAgeLimit").val()),
	MinimumChildrenAgeLimit: $("#Flight-TravelAndCabin-MinimumChildrenAgeLimit").val() === undefined ? 0 : parseInt($("#Flight-TravelAndCabin-MinimumChildrenAgeLimit").val()),
	LabelPassengerOnly: $("#Flight-TravelAndCabin-LabelPassengerOnly").val() === undefined ? "Adult" : $("#Flight-TravelAndCabin-LabelPassengerOnly").val(),
	LabelMultiplePassenger: $("#Flight-TravelAndCabin-LabelMultiplePassenger").val() === undefined ? "Traveller" : $("#Flight-TravelAndCabin-LabelMultiplePassenger").val(),
	IncrementAdultPassengerCount: function() {
		var n = parseInt($("#travel-and-cabin-adult-passenger-count").val());
		n = n - 1;
		n <= Flight.TravelAndCabin.MinimumAdultPassenger ? $("#travel-and-cabin-adult-passenger-decrement").attr("disabled", "disabled") : $("#travel-and-cabin-adult-passenger-decrement").removeAttr("disabled");
		$("#travel-and-cabin-adult-passenger-count").val(n);
		n < Flight.TravelAndCabin.MaximumAdultPassenger && $("#travel-and-cabin-adult-passenger-increment").removeAttr("disabled");
		Flight.TravelAndCabin.UpdateCabinField()
	},
	DecrementAdultPassengerCount: function() {
		var n = parseInt($("#travel-and-cabin-adult-passenger-count").val());
		n = n + 1;
		n >= Flight.TravelAndCabin.MaximumAdultPassenger ? $("#travel-and-cabin-adult-passenger-increment").attr("disabled", "disabled") : $("#travel-and-cabin-adult-passenger-increment").removeAttr("disabled");
		$("#travel-and-cabin-adult-passenger-count").val(n);
		n > Flight.TravelAndCabin.MinimumAdultPassenger && $("#travel-and-cabin-adult-passenger-decrement").removeAttr("disabled");
		Flight.TravelAndCabin.UpdateCabinField()
	},
	IncrementChildrenPassengerCount: function() {
		var n = parseInt($("#travel-and-cabin-children-passenger-count").val()),
			t;
		for (n = n + 1, n >= Flight.TravelAndCabin.MaximumChildrenPassenger ? $("#travel-and-cabin-children-passenger-increment").attr("disabled", "disabled") : $("#travel-and-cabin-children-passenger-increment").removeAttr("disabled"), $("#travel-and-cabin-children-passenger-count").val(n), n < Flight.TravelAndCabin.MaximumChildrenPassenger && $("#travel-and-cabin-children-passenger-decrement").removeAttr("disabled"), t = 0; t < Flight.TravelAndCabin.MaximumChildrenPassenger; t++) t < n ? $(".childAges .childNode").eq(t).removeClass("hidden") : $(".childAges .childNode").eq(t).addClass("hidden");
		Flight.TravelAndCabin.UpdateCabinField()
	},
	DecrementChildrenPassengerCount: function() {
		var n = parseInt($("#travel-and-cabin-children-passenger-count").val()),
			t;
		for (n = n - 1, n <= Flight.TravelAndCabin.MinimumChildrenPassenger ? $("#travel-and-cabin-children-passenger-decrement").attr("disabled", "disabled") : $("#travel-and-cabin-children-passenger-decrement").removeAttr("disabled"), $("#travel-and-cabin-children-passenger-count").val(n), n > Flight.TravelAndCabin.MinimumChildrenPassenger && $("#travel-and-cabin-children-passenger-increment").removeAttr("disabled"), t = 0; t < Flight.TravelAndCabin.MaximumChildrenPassenger; t++) t < n ? $(".childAges .childNode").eq(t).removeClass("hidden") : $(".childAges .childNode").eq(t).addClass("hidden");
		Flight.TravelAndCabin.UpdateCabinField()
	},
	GetAdultTraveller: function() {
		return parseInt($("#travel-and-cabin-adult-passenger-count").val())
	},
	GetChildTraveller: function() {
		var t = parseInt($("#travel-and-cabin-children-passenger-count").val()),
			n;
		return t < 1 ? t : (n = 0, $(".childAges .childNode:not(.hidden)").each(function() {
			var t = $(this).find(".childAge").val();
			t != null && t != undefined && parseInt(t) > Flight.TravelAndCabin.MaximumInfanAgeLimit && (n = n + 1)
		}), n)
	},
	GetChildAges: function() {
		var n = [];
		return $(".childAges .childNode:not(.hidden)").each(function() {
			var t = $(this).find(".childAge").val();
			t != null && t != undefined && n.push(t)
		}), n.join(",")
	},
	GetInfantTraveller: function() {
		var t = parseInt($("#travel-and-cabin-children-passenger-count").val()),
			n;
		return t < 1 ? t : (n = 0, $(".childAges .childNode:not(.hidden)").each(function() {
			var t = $(this).find(".childAge").val();
			t != null && t != undefined && parseInt(t) <= Flight.TravelAndCabin.MaximumInfanAgeLimit && (n = n + 1)
		}), n)
	},
	TotalTravellers: function() {
		return Flight.TravelAndCabin.GetAdultTraveller() + Flight.TravelAndCabin.GetChildTraveller() + Flight.TravelAndCabin.GetInfantTraveller()
	},
	ProperAgeSelectorError: function() {},
	GetCabinFieldValue: function() {
		$(".childAges .childNode:not(.hidden)").each(function() {
			var n = $(this).find(".childAge").val();
			if (n != null && n != undefined && parseInt(n) < 0) return Flight.TravelAndCabin.ProperAgeSelectorError(), !1
		});
		return {
			Adults: Flight.TravelAndCabin.GetAdultTraveller(),
			Children: Flight.TravelAndCabin.GetChildTraveller(),
			Infants: Flight.TravelAndCabin.GetInfantTraveller(),
			Class: $(".cabin_class").val()
		}
	},
	UpdateCabinField: function() {
		var n = Flight.TravelAndCabin.TotalTravellers(),
			t = Flight.TravelAndCabin.LabelPassengerOnly,
			i;
		n > 1 && (t = Flight.TravelAndCabin.LabelMultiplePassenger);
		i = $(".cabin_class option:selected").text();
		$(".travellers_cabin_value").val(n + " " + t + ", " + i)
	},
	SetFieldValue: function(n, t, i, r, u) {
		var f = parseInt(t) + parseInt(i),
			s = parseInt(n) + f,
			h = Flight.TravelAndCabin.LabelPassengerOnly,
			c, e, o;
		for (s > 1 && (h = Flight.TravelAndCabin.LabelMultiplePassenger), c = $(".cabin_class [value='" + r + "']").length, c > 0 ? ($(".cabin_class").val(r), $(".cabin_class").removeClass("errorClass")) : (r = "", $(".cabin_class").addClass("errorClass")), $("#travel-and-cabin-adult-passenger-count").val(n), Flight.API.ValidateAdult(n, $("#travel-and-cabin-adult-passenger-decrement")), Flight.API.ValidateAdult(n, $("#travel-and-cabin-adult-passenger-count")), Flight.API.ValidateAdult(n, $("#travel-and-cabin-adult-passenger-increment")), n <= Flight.TravelAndCabin.MinimumAdultPassenger && ($("#travel-and-cabin-adult-passenger-decrement").attr("disabled", "disabled"), $("#travel-and-cabin-adult-passenger-increment").removeAttr("disabled")), n >= Flight.TravelAndCabin.MaximumAdultPassenger && ($("#travel-and-cabin-adult-passenger-increment").attr("disabled", "disabled"), $("#travel-and-cabin-adult-passenger-decrement").removeAttr("disabled")), n < Flight.TravelAndCabin.MaximumAdultPassenger && n > Flight.TravelAndCabin.MinimumAdultPassenger && ($("#travel-and-cabin-adult-passenger-decrement").removeAttr("disabled"), $("#travel-and-cabin-adult-passenger-increment").removeAttr("disabled")), $("#travel-and-cabin-children-passenger-count").val(f), Flight.API.ValidateChildren(f, $("#travel-and-cabin-children-passenger-decrement")), Flight.API.ValidateChildren(f, $("#travel-and-cabin-children-passenger-count")), Flight.API.ValidateChildren(f, $("#travel-and-cabin-children-passenger-increment")), f <= Flight.TravelAndCabin.MinimumChildrenPassenger && ($("#travel-and-cabin-children-passenger-decrement").attr("disabled", "disabled"), $("#travel-and-cabin-children-passenger-increment").removeAttr("disabled")), f >= Flight.TravelAndCabin.MaximumChildrenPassenger && ($("#travel-and-cabin-children-passenger-increment").attr("disabled", "disabled"), $("#travel-and-cabin-children-passenger-decrement").removeAttr("disabled")), f < Flight.TravelAndCabin.MaximumChildrenPassenger && f > Flight.TravelAndCabin.MinimumChildrenPassenger && ($("#travel-and-cabin-children-passenger-decrement").removeAttr("disabled"), $("#travel-and-cabin-children-passenger-increment").removeAttr("disabled")), $(".travellers_cabin_value").val(s + " " + h + ", " + $(".cabin_class [value='" + r + "']").text()), e = 0; e < Flight.TravelAndCabin.MaximumChildrenPassenger; e++) e < f ? $(".childAges .childNode").eq(e).removeClass("hidden") : $(".childAges .childNode").eq(e).addClass("hidden");
		$(".traveller_cabin_info_popup .errorClass").length > 0 ? $("#travellersCabinField").addClass("errorClass") : $("#travellersCabinField").removeClass("errorClass");
		o = [];
		u && (o = u.split(","), $.each(o, function(n, t) {
			$("#childDiv-" + n + " .childAge").val(t)
		}))
	},
	IsValidCabinField: function() {
		var n = !0,
			r, t, u, i;
		return ($(".cabin_class") == null || $(".cabin_class") == undefined || $(".cabin_class").val() == "") && (n = n && !1), r = $("#travel-and-cabin-adult-passenger-count").val(), t = parseInt(r), (t < Flight.TravelAndCabin.MinimumAdultPassenger || t > Flight.TravelAndCabin.MaximumAdultPassenger) && (n = n && !1), u = $("#travel-and-cabin-children-passenger-count").val(), i = parseInt(u), (i < Flight.TravelAndCabin.MinimumChildrenPassenger || i > Flight.TravelAndCabin.MaximumChildrenPassenger) && (n = n && !1), $(".childAges .childNode:not(.hidden)").each(function() {
			var t = $(this).find(".childAge").val();
			t == null || t == undefined || t == "" ? n = n && !1 : (parseInt(t) < Flight.TravelAndCabin.MinimumChildrenAgeLimit || parseInt(t) > Flight.TravelAndCabin.MaximumChildrenAgeLimit) && (n = n && !1)
		}), n
	}
};
$(document).ready(function() {
	Flight.API.InitializeOnLoad();
	$("#btnSaveSearch").click(function() {
		Flight.API.SaveSearchHistoryPopUp()
	});
	$("#btnSearch").click(function() {
		var t, n, i;
		Flight.API.Validate() && (Flight.API.FirstLoad = !1, $(".progress-bar").css("left", 0), t = Flight.TravelAndCabin.GetAdultTraveller(), n = Flight.TravelAndCabin.GetInfantTraveller(), t && n && n > 0 && n > t ? (i = $("#hdnExtraInfantsErrorMessage").val(), i ? alert(i) : alert("Only 1 Child (0-2) per adult is allowed")) : (Flight.API.firstDataLoaded = !1, $("#errorMessage").hide(), $("#loadMoreInfo").hide(), NoMoreData = !0, $("#sortingDropdownContainer").hide(), $(".spinner").addClass("on"), $("#" + Flight.API.FilterContainerId).empty(), $("#" + Flight.API.FlightDetailContainer).empty(), $("#flightHeader").hide(), $("#errorMessage").hide(), Flight.API.FlightBooking()))
	});
	var t = new Date,
		n = new Date;
	$("#tbDepartDate").datepicker({
		minDate: t,
		onSelect: function() {
			n = $(this).val();
			n > $("#tbReturnDate").val() ? ($("#tbReturnDate").datepicker("option", "minDate", n), $("#tbReturnDate").val("")) : $("#tbReturnDate").datepicker("option", "minDate", n);
			setTimeout(function() {
				$("#tbReturnDate").datepicker("show")
			}, 100)
		}
	});
	Flight.API.resetReturnDate && (n = Flight.API.resetReturnDate, Flight.API.resetReturnDate = "");
	$("#tbReturnDate").datepicker({
		minDate: $("#tbDepartDate").val() != "" ? $("#tbDepartDate").val() : n,
		showButtonPanel: !0,
		closeText: clearDateLabel ? clearDateLabel : "Clear",
		onClose: function() {
			var n = arguments.callee.caller.caller.arguments[0];
			$(n.delegateTarget).hasClass("ui-datepicker-close") ? $(this).val("") : $(n.delegateTarget).hasClass("ui-datepicker-current") && $(this).val(new Date)
		}
	});
	$(".tooltipster").tooltipster({
		side: Modernizr.touch ? "top" : window.isRTLbool ? "left" : "right",
		trigger: Modernizr.touch ? "click" : "hover",
		maxWidth: 400,
		theme: "tooltipster-light",
		animationDuration: 100
	});
	$(window).width() <= 740 && $(".vertical-booking-widget .trip-planner-event-tabs").removeClass("cf");
	$(document).on("click", ".agent-chk input[type='checkbox']", function() {
		if ($(this).attr("data-name") == "all") $(this).is(":checked") ? $(".agent-chk input[type='checkbox']").each(function() {
			$(this).attr("data-name") != "all" && $(this).prop("checked", !0)
		}) : $(".agent-chk input[type='checkbox']").each(function() {
			$(this).attr("data-name") != "all" && $(this).prop("checked", !1)
		});
		else if ($(this).is(":checked")) {
			var n = !0;
			$(".agent-chk input[type='checkbox']").each(function() {
				$(this).attr("data-name") != "all" && (n = $(this).is(":checked") && n)
			});
			n && $(".agent-chk input[type='checkbox']").prop("checked", !0)
		} else $("#AllAgentChk").prop("checked", !1);
		Flight.API.ApplyFilter()
	});
	$(document).on("click", "#applyFilterMobile", function() {
		Flight.API.ApplyFilter();
		$(".vdf_search_filters_column").removeClass("on");
		$("body, .homepage_wrap").removeClass("on")
	});
	$(document).on("click", ".button_done", function() {
		$(".traveller_cabin_info_popup").removeClass("on");
		$("#btnSearch").click()
	});
	$(document).on("click", "#ResetFilter", function() {
		$(".load_updates").addClass("on");
		setTimeout(function() {
			var n, t, i, r, f, u;
			$(".agent-chk input[type='checkbox']").each(function() {
				$(this).prop("checked", !0)
			});
			Flight.API.FlightObj != null && (n = "00:00", t = "23:59", $("#tbDepLandingFrom").val(n), $("#tbDepLandingTo").val(t), $("#tbReturnFrom").val(n), $("#tbReturnTo").val(t), $("#deplandfrom").html(n), $("#deplandto").html(t), $("#retlandfrom").html(n), $("#retlandto").html(t), i = Flight.API.FlightObj.Filters.OutBoundMinDuration + 31, r = Flight.API.FlightObj.Filters.OutBoundMaxDuration + 60, minhour = Math.floor(i / 60), minMinute = i - minhour * 60, f = Flight.API.GetProperTime(minhour, minMinute), maxhour = Math.floor(r / 60), maxMinute = r - maxhour * 60, u = Flight.API.GetProperTime(maxhour, maxMinute), minhour == 0 && (minhour = "00"), minhour > 0 && minhour < 10 && (minhour = "0" + minhour), maxhour == 0 && (maxhour = "00"), maxhour > 0 && maxhour < 10 && (maxhour = "0" + maxhour), minMinute == "30" && maxMinute == "30" ? $("#timestring").text(minhour + ".5 " + Flight.API.HoursLabel + " - " + maxhour + ".5 " + Flight.API.HoursLabel) : minMinute == "30" ? $("#timestring").text(minhour + ".5 " + Flight.API.HoursLabel + " - " + maxhour + " " + Flight.API.HoursLabel) : maxMinute == "30" ? $("#timestring").text(minhour + " " + Flight.API.HoursLabel + " - " + maxhour + ".5 " + Flight.API.HoursLabel) : $("#timestring").text(minhour + " " + Flight.API.HoursLabel + " - " + maxhour + " " + Flight.API.HoursLabel), $("#tbDurationFrom").val(u), Flight.API.TwentyFourHourTimeSlider($(".Outbound"), $("#tbDepLandingFrom"), $("#tbDepLandingTo"), $("#deplandfrom"), $("#deplandto"), outboundMin, outboundMax, 15), $("#tbReturnFrom").val() && Flight.API.TwentyFourHourTimeSlider($(".Return"), $("#tbReturnFrom"), $("#tbReturnTo"), $("#retlandfrom"), $("#retlandto"), returnBoundMin, returnBoundMax, 15), Flight.API.SliderDuration($(".journey"), $("#tbDurationFrom"), f, u, 15));
			Flight.API.ResetSort();
			Flight.API.ApplyFilter();
			$("html, body").animate({
				scrollTop: 0
			}, 1e3)
		}, 100)
	});
	$(document).on("click", "#resetFilterMobile", function() {
		$(".load_updates").addClass("on");
		$(".vdf_search_filters_column").removeClass("on");
		$("body, .homepage_wrap").removeClass("on");
		setTimeout(function() {
			var n, t, i, r, f, u;
			$(".agent-chk input[type='checkbox']").each(function() {
				$(this).prop("checked", !0)
			});
			Flight.API.FlightObj != null && (n = "00:00", t = "23:59", $("#tbDepLandingFrom").val(n), $("#tbDepLandingTo").val(t), $("#tbReturnFrom").val(n), $("#tbReturnTo").val(t), $("#deplandfrom").html(n), $("#deplandto").html(t), $("#retlandfrom").html(n), $("#retlandto").html(t), i = Flight.API.FlightObj.Filters.OutBoundMinDuration, r = Flight.API.FlightObj.Filters.OutBoundMaxDuration, minhour = Math.floor(i / 60), minMinute = i - minhour * 60, f = Flight.API.GetProperTime(minhour, minMinute), maxhour = Math.floor(r / 60), maxMinute = r - maxhour * 60, u = Flight.API.GetProperTime(maxhour, maxMinute), minhour == 0 && (minhour = "00"), minhour > 0 && minhour < 10 && (minhour = "0" + minhour), maxhour == 0 && (maxhour = "00"), maxhour > 0 && maxhour < 10 && (maxhour = "0" + maxhour), minMinute == "30" && maxMinute == "30" ? $("#timestring").text(minhour + ".5 " + Flight.API.HoursLabel + " - " + maxhour + ".5 " + Flight.API.HoursLabel) : minMinute == "30" ? $("#timestring").text(minhour + ".5 " + Flight.API.HoursLabel + " - " + maxhour + " " + Flight.API.HoursLabel) : maxMinute == "30" ? $("#timestring").text(minhour + " " + Flight.API.HoursLabel + " - " + maxhour + ".5 " + Flight.API.HoursLabel) : $("#timestring").text(minhour + " " + Flight.API.HoursLabel + " - " + maxhour + " " + Flight.API.HoursLabel), $("#tbDurationFrom").val(u), Flight.API.TwentyFourHourTimeSlider($(".Outbound"), $("#tbDepLandingFrom"), $("#tbDepLandingTo"), $("#deplandfrom"), $("#deplandto"), outboundMin, outboundMax, 15), $("#tbReturnFrom").val() && Flight.API.TwentyFourHourTimeSlider($(".Return"), $("#tbReturnFrom"), $("#tbReturnTo"), $("#retlandfrom"), $("#retlandto"), returnBoundMin, returnBoundMax, 15), Flight.API.SliderDuration($(".journey"), $("#tbDurationFrom"), f, u, 15));
			Flight.API.ResetSort();
			Flight.API.ApplyFilter()
		}, 100)
	});
	$(document).on("click", ".history-record", function() {
		var n, r, t, u, y, p;
		$(".history-record").removeClass("active");
		n = $(this);
		$(n).addClass("active");
		var ft = n.attr("data-originalplace"),
			o = n.attr("data-destinationplace"),
			s = n.attr("data-adults"),
			h = n.attr("data-children"),
			c = n.attr("data-infants"),
			w = n.attr("data-inbounddate"),
			i = n.attr("data-outbounddate"),
			b = n.attr("data-flighttype"),
			f = n.attr("data-cabinclass"),
			et = n.attr("data-pageid"),
			l = n.attr("data-currency"),
			a = n.attr("data-sourceid"),
			v = n.attr("data-destinationid"),
			k = n.attr("data-Child1"),
			d = n.attr("data-Child2"),
			g = n.attr("data-Child3"),
			nt = n.attr("data-Child4"),
			tt = n.attr("data-Child5"),
			it = n.attr("data-Child6"),
			rt = n.attr("data-Child7"),
			ut = n.attr("data-Child8"),
			e = 0;
		e = k + "," + d + "," + g + "," + nt + "," + tt + "," + it + "," + rt + "," + ut;
		r = "";
		r = f == "PremiumEconomy" ? "x" : f == "Business" ? "b" : f == "First" ? "f" : "e";
		t = 0;
		u = "";
		b == "RT" ? (t = 2, u = "?destination=" + o + "&trip=" + t + "&cabin=" + r + "&currency=" + l + "&passengers=" + s + "&children=" + h + "&infants=" + c + "&departureDate=" + i + "&returnDate=" + w + "&childAges=" + e + "&sourceId=" + a + "&destinationId=" + v) : (t = 1, i = i.replace(new RegExp("/", "g"), ""), u = "?destination=" + o + "&trip=" + t + "&cabin=" + r + "&currency=" + l + "&passengers=" + s + "&children=" + h + "&infants=" + c + "&departureDate=" + i + "&childAges=" + e + "&sourceId=" + a + "&destinationId=" + v);
		y = window.location.protocol + "//" + window.location.host + window.location.pathname;
		p = y + u;
		window.location.href = p
	});
	$(document).on("click", ".save-list-delete", function() {
		var n = $(this).attr("data-id");
		Flight.API.RemoveEntryFromCookie(n)
	});
	$(document).on("click", "#btnLoadMore", function() {
		var n = $("#loadMoreInfo").attr("data-pageno"),
			i = $("#loadMoreInfo").attr("data-pagesize"),
			t = Flight.API.PagingObj != null ? Flight.API.PagingObj : Flight.API.FlightObj,
			f = t.SearchResult.length,
			r = Math.ceil(f / i),
			u;
		n < r - 1 ? ($("#loadMoreInfo").attr("data-pageno", parseInt(n) + 1), $("#loadMoreInfo").show(), NoMoreData = !1) : ($("#loadMoreInfo").attr("data-pageno", r), $("#loadMoreInfo").hide(), NoMoreData = !0);
		u = Flight.API.GetPagingRecord(n, i, t);
		Flight.API.RenderMarkUp(Flight.API.FlightTemplateId, Flight.API.FlightDetailContainer, u);
		$("#flightHeaderCount").html(t.SearchResult.length + " ")
	});
	$(document).on("click", ".fs-cardItem", function() {
		var n = $(this).find(".popupContent").html();
		$("#modal-content-agents-popup").html(n)
	});
	$("#flight_info").on("show.bs.modal", function() {
		$("html").addClass("modalopen")
	});
	$("#flight_info").on("hidden.bs.modal", function() {
		$("html").removeClass("modalopen");
		$(".vdf_flight_terms_conditions_details").removeClass("on");
		$("#term_condition .icon_arrow i").removeClass("on")
	});
	$(document).on("click", "#term_condition", function() {
		$(".vdf_flight_terms_conditions_details").toggleClass("on");
		$("#term_condition .icon_arrow i").toggleClass("on")
	});
	$(".travellers_cabin_value").click(function() {
		$(".traveller_cabin_info_popup").toggleClass("on");
		$(".traveller_cabin_info_popup .popover_close").focus()
	});
	$(".popover_close").click(function() {
		$(".traveller_cabin_info_popup").removeClass("on")
	});
	$(".flight_sorting").ddslick({});
	$(document).on("click", ".button_close_popup", function() {
		$(".modal.in").modal("hide")
	});
	$(".button_save_search").click(function() {
		$(".filter-save-search").slideToggle();
		$(this).toggleClass("on")
	});
	$(document).mouseup(function(n) {
		var t = $(".traveller_cabin_info_popup");
		t.is(n.target) || t.has(n.target).length !== 0 || t.removeClass("on")
	});
	$(document).on("click", "#travel-and-cabin-adult-passenger-decrement", function() {
		Flight.TravelAndCabin.IncrementAdultPassengerCount()
	});
	$(document).on("click", "#travel-and-cabin-adult-passenger-increment", function() {
		Flight.TravelAndCabin.DecrementAdultPassengerCount()
	});
	$(document).on("click", "#travel-and-cabin-children-passenger-decrement", function() {
		Flight.TravelAndCabin.DecrementChildrenPassengerCount()
	});
	$(document).on("click", "#travel-and-cabin-children-passenger-increment", function() {
		Flight.TravelAndCabin.IncrementChildrenPassengerCount()
	});
	$(document).on("change", ".cabin_class", function() {
		Flight.TravelAndCabin.UpdateCabinField()
	});
	$(document).on("click", ".sort-filter-airline", function() {
		Flight.Sorting.SortByAirline()
	});
	$(document).on("click", ".sort-filter-departure", function() {
		Flight.Sorting.SortByDeparture()
	});
	$(document).on("click", ".sort-filter-duration", function() {
		Flight.Sorting.SortByDuration()
	});
	$(document).on("click", ".sort-filter-return", function() {
		Flight.Sorting.SortByReturn()
	});
	$(document).on("click", ".sort-filter-price", function() {
		Flight.Sorting.SortByPrice()
	});
	$(document).on("click", ".sort-filter-stops", function() {
		Flight.Sorting.SortByStops()
	});
	$(".vdf_search_sorting_section .dd-options").on("click", function() {
		var t = $(".vdf_search_sorting_section .dd-selected label").html(),
			n = $("#ddlsorting option[data-text='" + t + "']").attr("value");
		n == "airline" ? Flight.Sorting.SortByAirline() : n == "departure" ? Flight.Sorting.SortByDeparture() : n == "duration" ? Flight.Sorting.SortByDuration() : n == "return" ? Flight.Sorting.SortByReturn() : n == "price" ? Flight.Sorting.SortByPrice() : n == "stops" && Flight.Sorting.SortByStops()
	});
	$("#ddlsorting").on("change", function() {
		var t = $(".vdf_search_sorting_section .dd-selected label").html(),
			n = $("#ddlsorting option[data-text='" + t + "']").attr("value");
		n == "airline" ? Flight.Sorting.SortByAirline() : n == "departure" ? Flight.Sorting.SortByDeparture() : n == "duration" ? Flight.Sorting.SortByDuration() : n == "return" ? Flight.Sorting.SortByReturn() : n == "price" ? Flight.Sorting.SortByPrice() : n == "stops" && Flight.Sorting.SortByStops()
	});
	Mustache.Formatters = {
		commaFormat: function(n) {
			return n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
		}
	}
});
Flight.Sorting = {
	MinimumAdultPassenger: 1,
	SortByAirline: function() {
		$(".sort-filter").removeClass("active");
		$(".sort-filter-airline").addClass("active");
		var n = $(".sort-filter-airline").attr("data-sortorder");
		$("#flightDetailContainer").attr("data-sorttype", "airline");
		$("#flightDetailContainer").attr("data-sortorder", n);
		n == "asc" ? $(".sort-filter-airline").attr("data-sortorder", "desc") : $(".sort-filter-airline").attr("data-sortorder", "asc");
		Flight.API.ApplyFilter(!0)
	},
	SortByDeparture: function() {
		$(".sort-filter").removeClass("active");
		$(".sort-filter-departure").addClass("active");
		var n = $(".sort-filter-departure").attr("data-sortorder");
		$("#flightDetailContainer").attr("data-sorttype", "departure");
		$("#flightDetailContainer").attr("data-sortorder", n);
		n == "asc" ? $(".sort-filter-departure").attr("data-sortorder", "desc") : $(".sort-filter-departure").attr("data-sortorder", "asc");
		Flight.API.ApplyFilter(!0)
	},
	SortByDuration: function() {
		$(".sort-filter").removeClass("active");
		$(".sort-filter-duration").addClass("active");
		var n = $(".sort-filter-duration").attr("data-sortorder");
		$("#flightDetailContainer").attr("data-sorttype", "duration");
		$("#flightDetailContainer").attr("data-sortorder", n);
		n == "asc" ? $(".sort-filter-duration").attr("data-sortorder", "desc") : $(".sort-filter-duration").attr("data-sortorder", "asc");
		Flight.API.ApplyFilter(!0)
	},
	SortByReturn: function() {
		$(".sort-filter").removeClass("active");
		$(".sort-filter-return").addClass("active");
		var n = $(".sort-filter-return").attr("data-sortorder");
		$("#flightDetailContainer").attr("data-sorttype", "return");
		$("#flightDetailContainer").attr("data-sortorder", n);
		n == "asc" ? $(".sort-filter-return").attr("data-sortorder", "desc") : $(".sort-filter-return").attr("data-sortorder", "asc");
		Flight.API.ApplyFilter(!0)
	},
	SortByPrice: function() {
		$(".sort-filter").removeClass("active");
		$(".sort-filter-price").addClass("active");
		var n = $(".sort-filter-price").attr("data-sortorder");
		$("#flightDetailContainer").attr("data-sorttype", "price");
		$("#flightDetailContainer").attr("data-sortorder", n);
		n == "asc" ? $(".sort-filter-price").attr("data-sortorder", "desc") : $(".sort-filter-price").attr("data-sortorder", "asc");
		Flight.API.ApplyFilter(!0)
	},
	SortByStops: function() {
		$(".sort-filter").removeClass("active");
		$(".sort-filter-stops").addClass("active");
		var n = $(".sort-filter-stops").attr("data-sortorder");
		$("#flightDetailContainer").attr("data-sorttype", "stops");
		$("#flightDetailContainer").attr("data-sortorder", n);
		n == "asc" ? $(".sort-filter-stops").attr("data-sortorder", "desc") : $(".sort-filter-stops").attr("data-sortorder", "asc");
		Flight.API.ApplyFilter(!0)
	}
};
NoMoreData = !0;
$(window).scroll(function() {
	$(window).scrollTop() + $(window).height() > $(document).height() - 500 && !NoMoreData && $("#btnLoadMore").click();
	$(window).width() >= 741 ? $(document).scrollTop() > 0 ? $(".progress-wrap").css("top", 78) : $(".progress-wrap").css("top", 109) : $(document).scrollTop() > 0 ? $(".progress-wrap").css("top", 54) : $(".progress-wrap").css("top", 85)
});
initialValue = 0;
sliderTooltip = function(n, t) {
	var i = t.value || initialValue,
		r = '<div class="tip_value"><div class="tip_value_inner">' + i + '<\/div><div class="tip_value_arrow"><\/div><\/div>';
	$(".ui-slider-handle").html(r)
};
$("#currencySelect").ddslick({
	onSelected: function(n) {
		Flight.API.CurrencyID = n.selectedData.value;
		$("#btnSearch").click()
	}
});
});